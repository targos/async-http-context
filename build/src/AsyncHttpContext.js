"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const async_hooks_1 = require("async_hooks");
const proxyHandler = {
    get(target, name, receiver) {
        /**
         * prevent imports generated by TypeScript from triggering an exception within the context check
         */
        if (name === '__esModule') {
            return false;
        }
        /**
         * if value exists on target, return that
         */
        if (target[name] !== undefined) {
            return Reflect.get(target, name, receiver);
        }
        return Reflect.get(target.ctx, name, receiver);
    },
    set(target, name, value, receiver) {
        return Reflect.set(target.ctx, name, value, receiver);
    },
};
class AsyncHttpContext {
    constructor() {
        this.$context = new async_hooks_1.AsyncLocalStorage();
        return new Proxy(this, proxyHandler);
    }
    // Internal
    $run(context, next) {
        return this.$context.run(context, next);
    }
    getStore() {
        return this.$context.getStore();
    }
    enterWith(store) {
        return this.$context.enterWith(store);
    }
    get ctx() {
        const store = this.$context.getStore();
        if (store === undefined) {
            throw new Error('AsyncHttpContext cannot be used outside of a request context');
        }
        return store;
    }
}
exports.default = AsyncHttpContext;
